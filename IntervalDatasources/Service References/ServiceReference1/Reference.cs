//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntervalDatasources.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessInfo", Namespace="http://schemas.datacontract.org/2004/07/UptimesWCFContract")]
    [System.SerializableAttribute()]
    public partial class ProcessInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDataSourceService")]
    public interface IDataSourceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataSourceService/GetAllRecords", ReplyAction="http://tempuri.org/IDataSourceService/GetAllRecordsResponse")]
        IntervalDatasources.ServiceReference1.ProcessInfo[] GetAllRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataSourceService/GetAllRecords", ReplyAction="http://tempuri.org/IDataSourceService/GetAllRecordsResponse")]
        System.Threading.Tasks.Task<IntervalDatasources.ServiceReference1.ProcessInfo[]> GetAllRecordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataSourceService/GetRecordsForPeriod", ReplyAction="http://tempuri.org/IDataSourceService/GetRecordsForPeriodResponse")]
        IntervalDatasources.ServiceReference1.ProcessInfo[] GetRecordsForPeriod(System.DateTime beginTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataSourceService/GetRecordsForPeriod", ReplyAction="http://tempuri.org/IDataSourceService/GetRecordsForPeriodResponse")]
        System.Threading.Tasks.Task<IntervalDatasources.ServiceReference1.ProcessInfo[]> GetRecordsForPeriodAsync(System.DateTime beginTime, System.DateTime endTime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataSourceServiceChannel : IntervalDatasources.ServiceReference1.IDataSourceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataSourceServiceClient : System.ServiceModel.ClientBase<IntervalDatasources.ServiceReference1.IDataSourceService>, IntervalDatasources.ServiceReference1.IDataSourceService {
        
        public DataSourceServiceClient() {
        }
        
        public DataSourceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataSourceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataSourceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataSourceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public IntervalDatasources.ServiceReference1.ProcessInfo[] GetAllRecords() {
            return base.Channel.GetAllRecords();
        }
        
        public System.Threading.Tasks.Task<IntervalDatasources.ServiceReference1.ProcessInfo[]> GetAllRecordsAsync() {
            return base.Channel.GetAllRecordsAsync();
        }
        
        public IntervalDatasources.ServiceReference1.ProcessInfo[] GetRecordsForPeriod(System.DateTime beginTime, System.DateTime endTime) {
            return base.Channel.GetRecordsForPeriod(beginTime, endTime);
        }
        
        public System.Threading.Tasks.Task<IntervalDatasources.ServiceReference1.ProcessInfo[]> GetRecordsForPeriodAsync(System.DateTime beginTime, System.DateTime endTime) {
            return base.Channel.GetRecordsForPeriodAsync(beginTime, endTime);
        }
    }
}
